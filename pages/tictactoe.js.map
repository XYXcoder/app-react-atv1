{"version":3,"sources":["webpack:///tictactoe.js","webpack:///./Examples/TicTacToe/TicTacToeApp.js","webpack:///./~/create-react-class/index.js?80a4","webpack:///./~/create-react-class/factory.js?4f2e"],"names":["webpackJsonp","0","module","exports","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","React","createClass","AppRegistry","StyleSheet","Text","TouchableHighlight","View","Platform","Board","this","size","grid","Array","row","j","turn","value","col","player","winner","Cell","cellStyle","styles","cellX","cellO","textStyle","cellTextX","cellTextO","textContents","render","createElement","onPress","underlayColor","activeOpacity","style","cell","cellText","GameEndOverlay","board","tie","message","overlay","overlayMessage","onRestart","newGame","newGameText","TicTacToeApp","getInitialState","restartGame","setState","nextPlayer","state","handleCellPress","hasMark","mark","_this","rows","map","cells","bind","container","title","create","flex","justifyContent","alignItems","backgroundColor","fontFamily","fontSize","marginBottom","padding","borderRadius","flexDirection","width","height","margin","color","position","top","bottom","left","right","marginLeft","marginRight","textAlign","registerComponent","OS","app","document","body","appendChild","runApplication","rootTag","331","factory","Error","ReactNoopUpdateQueue","Component","updater","isValidElement","332","identity","fn","ReactComponent","validateMethodOverride","isAlreadyDefined","name","specPolicy","ReactClassInterface","hasOwnProperty","ReactClassMixin","_invariant","mixSpecIntoComponent","spec","proto","autoBindPairs","__reactAutoBindPairs","MIXINS_KEY","RESERVED_SPEC_KEYS","mixins","property","isReactClassMethod","isFunction","shouldAutoBind","autobind","push","createMergedResultFunction","createChainedFunction","mixStaticSpecIntoComponent","statics","isReserved","isInherited","mergeIntoWithNoDuplicateKeys","one","two","undefined","a","apply","arguments","b","c","bindAutoBindMethod","component","method","boundMethod","bindAutoBindMethods","pairs","autoBindKey","context","refs","emptyObject","initialState","isArray","displayName","ReactClassComponent","constructor","injectedMixins","forEach","IsMountedPreMixin","IsMountedPostMixin","getDefaultProps","defaultProps","methodName","propTypes","contextTypes","childContextTypes","getChildContext","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","_assign","__isMounted","replaceState","newState","callback","enqueueReplaceState","isMounted","ReactPropTypeLocationNames","333","334","335"],"mappings":"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","file":"tictactoe.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}\n\t\n\tvar React=__webpack_require__(1);\n\tvar createClass=__webpack_require__(331);var\n\t\n\tAppRegistry=\n\t\n\t\n\t\n\t\n\t\n\tReact.AppRegistry,StyleSheet=React.StyleSheet,Text=React.Text,TouchableHighlight=React.TouchableHighlight,View=React.View,Platform=React.Platform;var\n\t\n\tBoard=function(){\n\t\n\t\n\t\n\tfunction Board(){_classCallCheck(this,Board);\n\tvar size=3;\n\tvar grid=Array(size);\n\tfor(var i=0;i<size;i++){\n\tvar row=Array(size);\n\tfor(var j=0;j<size;j++){\n\trow[j]=0;\n\t}\n\tgrid[i]=row;\n\t}\n\tthis.grid=grid;\n\t\n\tthis.turn=1;\n\t}_createClass(Board,[{key:'mark',value:function mark(\n\t\n\trow,col,player){\n\tthis.grid[row][col]=player;\n\treturn this;\n\t}},{key:'hasMark',value:function hasMark(\n\t\n\trow,col){\n\treturn this.grid[row][col]!==0;\n\t}},{key:'winner',value:function winner()\n\t\n\t{\n\tfor(var i=0;i<3;i++){\n\tif(this.grid[i][0]!==0&&this.grid[i][0]===this.grid[i][1]&&\n\tthis.grid[i][0]===this.grid[i][2]){\n\treturn this.grid[i][0];\n\t}\n\t}\n\t\n\tfor(var i=0;i<3;i++){\n\tif(this.grid[0][i]!==0&&this.grid[0][i]===this.grid[1][i]&&\n\tthis.grid[0][i]===this.grid[2][i]){\n\treturn this.grid[0][i];\n\t}\n\t}\n\t\n\tif(this.grid[0][0]!==0&&this.grid[0][0]===this.grid[1][1]&&\n\tthis.grid[0][0]===this.grid[2][2]){\n\treturn this.grid[0][0];\n\t}\n\t\n\tif(this.grid[0][2]!==0&&this.grid[0][2]===this.grid[1][1]&&\n\tthis.grid[0][2]===this.grid[2][0]){\n\treturn this.grid[0][2];\n\t}\n\t\n\treturn null;\n\t}},{key:'tie',value:function tie()\n\t\n\t{\n\tfor(var i=0;i<3;i++){\n\tfor(var j=0;j<3;j++){\n\tif(this.grid[i][j]===0){\n\treturn false;\n\t}\n\t}\n\t}\n\t\n\treturn this.winner()===null;\n\t}}]);return Board;}();\n\t\n\t\n\tvar Cell=createClass({\n\tcellStyle:function cellStyle(){\n\tswitch(this.props.player){\n\tcase 1:\n\treturn styles.cellX;\n\tcase 2:\n\treturn styles.cellO;\n\tdefault:\n\treturn null;}\n\t\n\t},\n\t\n\ttextStyle:function textStyle(){\n\tswitch(this.props.player){\n\tcase 1:\n\treturn styles.cellTextX;\n\tcase 2:\n\treturn styles.cellTextO;\n\tdefault:\n\treturn{};}\n\t\n\t},\n\t\n\ttextContents:function textContents(){\n\tswitch(this.props.player){\n\tcase 1:\n\treturn'X';\n\tcase 2:\n\treturn'O';\n\tdefault:\n\treturn'';}\n\t\n\t},\n\t\n\trender:function render(){\n\treturn(\n\tReact.createElement(TouchableHighlight,{\n\tonPress:this.props.onPress,\n\tunderlayColor:'transparent',\n\tactiveOpacity:0.5},\n\tReact.createElement(View,{style:[styles.cell,this.cellStyle()]},\n\tReact.createElement(Text,{style:[styles.cellText,this.textStyle()]},\n\tthis.textContents()))));\n\t\n\t\n\t\n\t\n\t}});\n\t\n\t\n\tvar GameEndOverlay=createClass({\n\trender:function render(){\n\tvar board=this.props.board;\n\t\n\tvar tie=board.tie();\n\tvar winner=board.winner();\n\tif(!winner&&!tie){\n\treturn React.createElement(View,null);\n\t}\n\t\n\tvar message;\n\tif(tie){\n\tmessage='It\\'s a tie!';\n\t}else{\n\tmessage=(winner===1?'X':'O')+' wins!';\n\t}\n\t\n\treturn(\n\tReact.createElement(View,{style:styles.overlay},\n\tReact.createElement(Text,{style:styles.overlayMessage},message),\n\tReact.createElement(TouchableHighlight,{\n\tonPress:this.props.onRestart,\n\tunderlayColor:'transparent',\n\tactiveOpacity:0.5},\n\tReact.createElement(View,{style:styles.newGame},\n\tReact.createElement(Text,{style:styles.newGameText},'New Game')))));\n\t\n\t\n\t\n\t\n\t}});\n\t\n\t\n\tvar TicTacToeApp=createClass({\n\tgetInitialState:function getInitialState(){\n\treturn{board:new Board(),player:1};\n\t},\n\t\n\trestartGame:function restartGame(){\n\tthis.setState(this.getInitialState());\n\t},\n\t\n\tnextPlayer:function nextPlayer(){\n\treturn this.state.player===1?2:1;\n\t},\n\t\n\thandleCellPress:function handleCellPress(row,col){\n\tif(this.state.board.hasMark(row,col)){\n\treturn;\n\t}\n\t\n\tthis.setState({\n\tboard:this.state.board.mark(row,col,this.state.player),\n\tplayer:this.nextPlayer()});\n\t\n\t},\n\t\n\trender:function render(){var _this=this;\n\tvar rows=this.state.board.grid.map(function(cells,row){return(\n\tReact.createElement(View,{key:'row'+row,style:styles.row},\n\tcells.map(function(player,col){return(\n\tReact.createElement(Cell,{\n\tkey:'cell'+col,\n\tplayer:player,\n\tonPress:_this.handleCellPress.bind(_this,row,col)}));})));});\n\t\n\t\n\t\n\t\n\t\n\treturn(\n\tReact.createElement(View,{style:styles.container},\n\tReact.createElement(Text,{style:styles.title},'EXTREME T3'),\n\tReact.createElement(View,{style:styles.board},\n\trows),\n\t\n\tReact.createElement(GameEndOverlay,{\n\tboard:this.state.board,\n\tonRestart:this.restartGame})));\n\t\n\t\n\t\n\t}});\n\t\n\t\n\tvar styles=StyleSheet.create({\n\tcontainer:{\n\tflex:1,\n\tjustifyContent:'center',\n\talignItems:'center',\n\tbackgroundColor:'white'},\n\t\n\ttitle:{\n\tfontFamily:'Chalkduster',\n\tfontSize:39,\n\tmarginBottom:20},\n\t\n\tboard:{\n\tpadding:5,\n\tbackgroundColor:'#47525d',\n\tborderRadius:10},\n\t\n\trow:{\n\tflexDirection:'row'},\n\t\n\t\n\t\n\t\n\tcell:{\n\twidth:80,\n\theight:80,\n\tborderRadius:5,\n\tbackgroundColor:'#7b8994',\n\tmargin:5,\n\tflex:1,\n\tjustifyContent:'center',\n\talignItems:'center'},\n\t\n\tcellX:{\n\tbackgroundColor:'#72d0eb'},\n\t\n\tcellO:{\n\tbackgroundColor:'#7ebd26'},\n\t\n\t\n\t\n\t\n\tcellText:{\n\tborderRadius:5,\n\tfontSize:50,\n\tfontFamily:'AvenirNext-Bold'},\n\t\n\tcellTextX:{\n\tcolor:'#19a9e5'},\n\t\n\tcellTextO:{\n\tcolor:'#b9dc2f'},\n\t\n\t\n\t\n\t\n\toverlay:{\n\tposition:'absolute',\n\ttop:0,\n\tbottom:0,\n\tleft:0,\n\tright:0,\n\tbackgroundColor:'rgba(221, 221, 221, 0.5)',\n\tflex:1,\n\tflexDirection:'column',\n\tjustifyContent:'center',\n\talignItems:'center'},\n\t\n\toverlayMessage:{\n\tfontSize:40,\n\tmarginBottom:20,\n\tmarginLeft:20,\n\tmarginRight:20,\n\tfontFamily:'AvenirNext-DemiBold',\n\ttextAlign:'center'},\n\t\n\tnewGame:{\n\tbackgroundColor:'#887766',\n\tpadding:20,\n\tborderRadius:5},\n\t\n\tnewGameText:{\n\tcolor:'white',\n\tfontSize:20,\n\tfontFamily:'AvenirNext-DemiBold'}});\n\t\n\t\n\t\n\tAppRegistry.registerComponent('TicTacToeApp',function(){return TicTacToeApp;});\n\t\n\tif(Platform.OS=='web'){\n\tvar app=document.createElement('div');\n\tdocument.body.appendChild(app);\n\t\n\tAppRegistry.runApplication('TicTacToeApp',{\n\trootTag:app});\n\t\n\t}\n\t\n\tmodule.exports=TicTacToeApp;\n\n/***/ },\n\n/***/ 331:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t */\n\t\n\t'use strict';\n\t\n\tvar React = __webpack_require__(2);\n\tvar factory = __webpack_require__(332);\n\t\n\tif (typeof React === 'undefined') {\n\t  throw Error(\n\t    'create-react-class could not find the React object. If you are using script tags, ' +\n\t      'make sure that React is being loaded before create-react-class.'\n\t  );\n\t}\n\t\n\t// Hack to grab NoopUpdateQueue from isomorphic React\n\tvar ReactNoopUpdateQueue = new React.Component().updater;\n\t\n\tmodule.exports = factory(\n\t  React.Component,\n\t  React.isValidElement,\n\t  ReactNoopUpdateQueue\n\t);\n\n\n/***/ },\n\n/***/ 332:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t */\n\t\n\t'use strict';\n\t\n\tvar _assign = __webpack_require__(333);\n\t\n\tvar emptyObject = __webpack_require__(334);\n\tvar _invariant = __webpack_require__(335);\n\t\n\tif (false) {\n\t  var warning = require('fbjs/lib/warning');\n\t}\n\t\n\tvar MIXINS_KEY = 'mixins';\n\t\n\t// Helper function to allow the creation of anonymous functions which do not\n\t// have .name set to the name of the variable being assigned to.\n\tfunction identity(fn) {\n\t  return fn;\n\t}\n\t\n\tvar ReactPropTypeLocationNames;\n\tif (false) {\n\t  ReactPropTypeLocationNames = {\n\t    prop: 'prop',\n\t    context: 'context',\n\t    childContext: 'child context'\n\t  };\n\t} else {\n\t  ReactPropTypeLocationNames = {};\n\t}\n\t\n\tfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n\t  /**\n\t   * Policies that describe methods in `ReactClassInterface`.\n\t   */\n\t\n\t  var injectedMixins = [];\n\t\n\t  /**\n\t   * Composite components are higher-level components that compose other composite\n\t   * or host components.\n\t   *\n\t   * To create a new type of `ReactClass`, pass a specification of\n\t   * your new class to `React.createClass`. The only requirement of your class\n\t   * specification is that you implement a `render` method.\n\t   *\n\t   *   var MyComponent = React.createClass({\n\t   *     render: function() {\n\t   *       return <div>Hello World</div>;\n\t   *     }\n\t   *   });\n\t   *\n\t   * The class specification supports a specific protocol of methods that have\n\t   * special meaning (e.g. `render`). See `ReactClassInterface` for\n\t   * more the comprehensive protocol. Any other properties and methods in the\n\t   * class specification will be available on the prototype.\n\t   *\n\t   * @interface ReactClassInterface\n\t   * @internal\n\t   */\n\t  var ReactClassInterface = {\n\t    /**\n\t     * An array of Mixin objects to include when defining your component.\n\t     *\n\t     * @type {array}\n\t     * @optional\n\t     */\n\t    mixins: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * An object containing properties and methods that should be defined on\n\t     * the component's constructor instead of its prototype (static methods).\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    statics: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Definition of prop types for this component.\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    propTypes: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Definition of context types for this component.\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    contextTypes: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Definition of context types this component sets for its children.\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    childContextTypes: 'DEFINE_MANY',\n\t\n\t    // ==== Definition methods ====\n\t\n\t    /**\n\t     * Invoked when the component is mounted. Values in the mapping will be set on\n\t     * `this.props` if that prop is not specified (i.e. using an `in` check).\n\t     *\n\t     * This method is invoked before `getInitialState` and therefore cannot rely\n\t     * on `this.state` or use `this.setState`.\n\t     *\n\t     * @return {object}\n\t     * @optional\n\t     */\n\t    getDefaultProps: 'DEFINE_MANY_MERGED',\n\t\n\t    /**\n\t     * Invoked once before the component is mounted. The return value will be used\n\t     * as the initial value of `this.state`.\n\t     *\n\t     *   getInitialState: function() {\n\t     *     return {\n\t     *       isOn: false,\n\t     *       fooBaz: new BazFoo()\n\t     *     }\n\t     *   }\n\t     *\n\t     * @return {object}\n\t     * @optional\n\t     */\n\t    getInitialState: 'DEFINE_MANY_MERGED',\n\t\n\t    /**\n\t     * @return {object}\n\t     * @optional\n\t     */\n\t    getChildContext: 'DEFINE_MANY_MERGED',\n\t\n\t    /**\n\t     * Uses props from `this.props` and state from `this.state` to render the\n\t     * structure of the component.\n\t     *\n\t     * No guarantees are made about when or how often this method is invoked, so\n\t     * it must not have side effects.\n\t     *\n\t     *   render: function() {\n\t     *     var name = this.props.name;\n\t     *     return <div>Hello, {name}!</div>;\n\t     *   }\n\t     *\n\t     * @return {ReactComponent}\n\t     * @required\n\t     */\n\t    render: 'DEFINE_ONCE',\n\t\n\t    // ==== Delegate methods ====\n\t\n\t    /**\n\t     * Invoked when the component is initially created and about to be mounted.\n\t     * This may have side effects, but any external subscriptions or data created\n\t     * by this method must be cleaned up in `componentWillUnmount`.\n\t     *\n\t     * @optional\n\t     */\n\t    componentWillMount: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked when the component has been mounted and has a DOM representation.\n\t     * However, there is no guarantee that the DOM node is in the document.\n\t     *\n\t     * Use this as an opportunity to operate on the DOM when the component has\n\t     * been mounted (initialized and rendered) for the first time.\n\t     *\n\t     * @param {DOMElement} rootNode DOM element representing the component.\n\t     * @optional\n\t     */\n\t    componentDidMount: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked before the component receives new props.\n\t     *\n\t     * Use this as an opportunity to react to a prop transition by updating the\n\t     * state using `this.setState`. Current props are accessed via `this.props`.\n\t     *\n\t     *   componentWillReceiveProps: function(nextProps, nextContext) {\n\t     *     this.setState({\n\t     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n\t     *     });\n\t     *   }\n\t     *\n\t     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n\t     * transition may cause a state change, but the opposite is not true. If you\n\t     * need it, you are probably looking for `componentWillUpdate`.\n\t     *\n\t     * @param {object} nextProps\n\t     * @optional\n\t     */\n\t    componentWillReceiveProps: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked while deciding if the component should be updated as a result of\n\t     * receiving new props, state and/or context.\n\t     *\n\t     * Use this as an opportunity to `return false` when you're certain that the\n\t     * transition to the new props/state/context will not require a component\n\t     * update.\n\t     *\n\t     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n\t     *     return !equal(nextProps, this.props) ||\n\t     *       !equal(nextState, this.state) ||\n\t     *       !equal(nextContext, this.context);\n\t     *   }\n\t     *\n\t     * @param {object} nextProps\n\t     * @param {?object} nextState\n\t     * @param {?object} nextContext\n\t     * @return {boolean} True if the component should update.\n\t     * @optional\n\t     */\n\t    shouldComponentUpdate: 'DEFINE_ONCE',\n\t\n\t    /**\n\t     * Invoked when the component is about to update due to a transition from\n\t     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n\t     * and `nextContext`.\n\t     *\n\t     * Use this as an opportunity to perform preparation before an update occurs.\n\t     *\n\t     * NOTE: You **cannot** use `this.setState()` in this method.\n\t     *\n\t     * @param {object} nextProps\n\t     * @param {?object} nextState\n\t     * @param {?object} nextContext\n\t     * @param {ReactReconcileTransaction} transaction\n\t     * @optional\n\t     */\n\t    componentWillUpdate: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked when the component's DOM representation has been updated.\n\t     *\n\t     * Use this as an opportunity to operate on the DOM when the component has\n\t     * been updated.\n\t     *\n\t     * @param {object} prevProps\n\t     * @param {?object} prevState\n\t     * @param {?object} prevContext\n\t     * @param {DOMElement} rootNode DOM element representing the component.\n\t     * @optional\n\t     */\n\t    componentDidUpdate: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked when the component is about to be removed from its parent and have\n\t     * its DOM representation destroyed.\n\t     *\n\t     * Use this as an opportunity to deallocate any external resources.\n\t     *\n\t     * NOTE: There is no `componentDidUnmount` since your component will have been\n\t     * destroyed by that point.\n\t     *\n\t     * @optional\n\t     */\n\t    componentWillUnmount: 'DEFINE_MANY',\n\t\n\t    // ==== Advanced methods ====\n\t\n\t    /**\n\t     * Updates the component's currently mounted DOM representation.\n\t     *\n\t     * By default, this implements React's rendering and reconciliation algorithm.\n\t     * Sophisticated clients may wish to override this.\n\t     *\n\t     * @param {ReactReconcileTransaction} transaction\n\t     * @internal\n\t     * @overridable\n\t     */\n\t    updateComponent: 'OVERRIDE_BASE'\n\t  };\n\t\n\t  /**\n\t   * Mapping from class specification keys to special processing functions.\n\t   *\n\t   * Although these are declared like instance properties in the specification\n\t   * when defining classes using `React.createClass`, they are actually static\n\t   * and are accessible on the constructor instead of the prototype. Despite\n\t   * being static, they must be defined outside of the \"statics\" key under\n\t   * which all other static methods are defined.\n\t   */\n\t  var RESERVED_SPEC_KEYS = {\n\t    displayName: function(Constructor, displayName) {\n\t      Constructor.displayName = displayName;\n\t    },\n\t    mixins: function(Constructor, mixins) {\n\t      if (mixins) {\n\t        for (var i = 0; i < mixins.length; i++) {\n\t          mixSpecIntoComponent(Constructor, mixins[i]);\n\t        }\n\t      }\n\t    },\n\t    childContextTypes: function(Constructor, childContextTypes) {\n\t      if (false) {\n\t        validateTypeDef(Constructor, childContextTypes, 'childContext');\n\t      }\n\t      Constructor.childContextTypes = _assign(\n\t        {},\n\t        Constructor.childContextTypes,\n\t        childContextTypes\n\t      );\n\t    },\n\t    contextTypes: function(Constructor, contextTypes) {\n\t      if (false) {\n\t        validateTypeDef(Constructor, contextTypes, 'context');\n\t      }\n\t      Constructor.contextTypes = _assign(\n\t        {},\n\t        Constructor.contextTypes,\n\t        contextTypes\n\t      );\n\t    },\n\t    /**\n\t     * Special case getDefaultProps which should move into statics but requires\n\t     * automatic merging.\n\t     */\n\t    getDefaultProps: function(Constructor, getDefaultProps) {\n\t      if (Constructor.getDefaultProps) {\n\t        Constructor.getDefaultProps = createMergedResultFunction(\n\t          Constructor.getDefaultProps,\n\t          getDefaultProps\n\t        );\n\t      } else {\n\t        Constructor.getDefaultProps = getDefaultProps;\n\t      }\n\t    },\n\t    propTypes: function(Constructor, propTypes) {\n\t      if (false) {\n\t        validateTypeDef(Constructor, propTypes, 'prop');\n\t      }\n\t      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n\t    },\n\t    statics: function(Constructor, statics) {\n\t      mixStaticSpecIntoComponent(Constructor, statics);\n\t    },\n\t    autobind: function() {}\n\t  };\n\t\n\t  function validateTypeDef(Constructor, typeDef, location) {\n\t    for (var propName in typeDef) {\n\t      if (typeDef.hasOwnProperty(propName)) {\n\t        // use a warning instead of an _invariant so components\n\t        // don't show up in prod but only in __DEV__\n\t        if (false) {\n\t          warning(\n\t            typeof typeDef[propName] === 'function',\n\t            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n\t              'React.PropTypes.',\n\t            Constructor.displayName || 'ReactClass',\n\t            ReactPropTypeLocationNames[location],\n\t            propName\n\t          );\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function validateMethodOverride(isAlreadyDefined, name) {\n\t    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n\t      ? ReactClassInterface[name]\n\t      : null;\n\t\n\t    // Disallow overriding of base class methods unless explicitly allowed.\n\t    if (ReactClassMixin.hasOwnProperty(name)) {\n\t      _invariant(\n\t        specPolicy === 'OVERRIDE_BASE',\n\t        'ReactClassInterface: You are attempting to override ' +\n\t          '`%s` from your class specification. Ensure that your method names ' +\n\t          'do not overlap with React methods.',\n\t        name\n\t      );\n\t    }\n\t\n\t    // Disallow defining methods more than once unless explicitly allowed.\n\t    if (isAlreadyDefined) {\n\t      _invariant(\n\t        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n\t        'ReactClassInterface: You are attempting to define ' +\n\t          '`%s` on your component more than once. This conflict may be due ' +\n\t          'to a mixin.',\n\t        name\n\t      );\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Mixin helper which handles policy validation and reserved\n\t   * specification keys when building React classes.\n\t   */\n\t  function mixSpecIntoComponent(Constructor, spec) {\n\t    if (!spec) {\n\t      if (false) {\n\t        var typeofSpec = typeof spec;\n\t        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\t\n\t        if (process.env.NODE_ENV !== 'production') {\n\t          warning(\n\t            isMixinValid,\n\t            \"%s: You're attempting to include a mixin that is either null \" +\n\t              'or not an object. Check the mixins included by the component, ' +\n\t              'as well as any mixins they include themselves. ' +\n\t              'Expected object but got %s.',\n\t            Constructor.displayName || 'ReactClass',\n\t            spec === null ? null : typeofSpec\n\t          );\n\t        }\n\t      }\n\t\n\t      return;\n\t    }\n\t\n\t    _invariant(\n\t      typeof spec !== 'function',\n\t      \"ReactClass: You're attempting to \" +\n\t        'use a component class or function as a mixin. Instead, just use a ' +\n\t        'regular object.'\n\t    );\n\t    _invariant(\n\t      !isValidElement(spec),\n\t      \"ReactClass: You're attempting to \" +\n\t        'use a component as a mixin. Instead, just use a regular object.'\n\t    );\n\t\n\t    var proto = Constructor.prototype;\n\t    var autoBindPairs = proto.__reactAutoBindPairs;\n\t\n\t    // By handling mixins before any other properties, we ensure the same\n\t    // chaining order is applied to methods with DEFINE_MANY policy, whether\n\t    // mixins are listed before or after these methods in the spec.\n\t    if (spec.hasOwnProperty(MIXINS_KEY)) {\n\t      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n\t    }\n\t\n\t    for (var name in spec) {\n\t      if (!spec.hasOwnProperty(name)) {\n\t        continue;\n\t      }\n\t\n\t      if (name === MIXINS_KEY) {\n\t        // We have already handled mixins in a special case above.\n\t        continue;\n\t      }\n\t\n\t      var property = spec[name];\n\t      var isAlreadyDefined = proto.hasOwnProperty(name);\n\t      validateMethodOverride(isAlreadyDefined, name);\n\t\n\t      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n\t        RESERVED_SPEC_KEYS[name](Constructor, property);\n\t      } else {\n\t        // Setup methods on prototype:\n\t        // The following member methods should not be automatically bound:\n\t        // 1. Expected ReactClass methods (in the \"interface\").\n\t        // 2. Overridden methods (that were mixed in).\n\t        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n\t        var isFunction = typeof property === 'function';\n\t        var shouldAutoBind =\n\t          isFunction &&\n\t          !isReactClassMethod &&\n\t          !isAlreadyDefined &&\n\t          spec.autobind !== false;\n\t\n\t        if (shouldAutoBind) {\n\t          autoBindPairs.push(name, property);\n\t          proto[name] = property;\n\t        } else {\n\t          if (isAlreadyDefined) {\n\t            var specPolicy = ReactClassInterface[name];\n\t\n\t            // These cases should already be caught by validateMethodOverride.\n\t            _invariant(\n\t              isReactClassMethod &&\n\t                (specPolicy === 'DEFINE_MANY_MERGED' ||\n\t                  specPolicy === 'DEFINE_MANY'),\n\t              'ReactClass: Unexpected spec policy %s for key %s ' +\n\t                'when mixing in component specs.',\n\t              specPolicy,\n\t              name\n\t            );\n\t\n\t            // For methods which are defined more than once, call the existing\n\t            // methods before calling the new property, merging if appropriate.\n\t            if (specPolicy === 'DEFINE_MANY_MERGED') {\n\t              proto[name] = createMergedResultFunction(proto[name], property);\n\t            } else if (specPolicy === 'DEFINE_MANY') {\n\t              proto[name] = createChainedFunction(proto[name], property);\n\t            }\n\t          } else {\n\t            proto[name] = property;\n\t            if (false) {\n\t              // Add verbose displayName to the function, which helps when looking\n\t              // at profiling tools.\n\t              if (typeof property === 'function' && spec.displayName) {\n\t                proto[name].displayName = spec.displayName + '_' + name;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function mixStaticSpecIntoComponent(Constructor, statics) {\n\t    if (!statics) {\n\t      return;\n\t    }\n\t    for (var name in statics) {\n\t      var property = statics[name];\n\t      if (!statics.hasOwnProperty(name)) {\n\t        continue;\n\t      }\n\t\n\t      var isReserved = name in RESERVED_SPEC_KEYS;\n\t      _invariant(\n\t        !isReserved,\n\t        'ReactClass: You are attempting to define a reserved ' +\n\t          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n\t          'as an instance property instead; it will still be accessible on the ' +\n\t          'constructor.',\n\t        name\n\t      );\n\t\n\t      var isInherited = name in Constructor;\n\t      _invariant(\n\t        !isInherited,\n\t        'ReactClass: You are attempting to define ' +\n\t          '`%s` on your component more than once. This conflict may be ' +\n\t          'due to a mixin.',\n\t        name\n\t      );\n\t      Constructor[name] = property;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Merge two objects, but throw if both contain the same key.\n\t   *\n\t   * @param {object} one The first object, which is mutated.\n\t   * @param {object} two The second object\n\t   * @return {object} one after it has been mutated to contain everything in two.\n\t   */\n\t  function mergeIntoWithNoDuplicateKeys(one, two) {\n\t    _invariant(\n\t      one && two && typeof one === 'object' && typeof two === 'object',\n\t      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n\t    );\n\t\n\t    for (var key in two) {\n\t      if (two.hasOwnProperty(key)) {\n\t        _invariant(\n\t          one[key] === undefined,\n\t          'mergeIntoWithNoDuplicateKeys(): ' +\n\t            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n\t            'may be due to a mixin; in particular, this may be caused by two ' +\n\t            'getInitialState() or getDefaultProps() methods returning objects ' +\n\t            'with clashing keys.',\n\t          key\n\t        );\n\t        one[key] = two[key];\n\t      }\n\t    }\n\t    return one;\n\t  }\n\t\n\t  /**\n\t   * Creates a function that invokes two functions and merges their return values.\n\t   *\n\t   * @param {function} one Function to invoke first.\n\t   * @param {function} two Function to invoke second.\n\t   * @return {function} Function that invokes the two argument functions.\n\t   * @private\n\t   */\n\t  function createMergedResultFunction(one, two) {\n\t    return function mergedResult() {\n\t      var a = one.apply(this, arguments);\n\t      var b = two.apply(this, arguments);\n\t      if (a == null) {\n\t        return b;\n\t      } else if (b == null) {\n\t        return a;\n\t      }\n\t      var c = {};\n\t      mergeIntoWithNoDuplicateKeys(c, a);\n\t      mergeIntoWithNoDuplicateKeys(c, b);\n\t      return c;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Creates a function that invokes two functions and ignores their return vales.\n\t   *\n\t   * @param {function} one Function to invoke first.\n\t   * @param {function} two Function to invoke second.\n\t   * @return {function} Function that invokes the two argument functions.\n\t   * @private\n\t   */\n\t  function createChainedFunction(one, two) {\n\t    return function chainedFunction() {\n\t      one.apply(this, arguments);\n\t      two.apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Binds a method to the component.\n\t   *\n\t   * @param {object} component Component whose method is going to be bound.\n\t   * @param {function} method Method to be bound.\n\t   * @return {function} The bound method.\n\t   */\n\t  function bindAutoBindMethod(component, method) {\n\t    var boundMethod = method.bind(component);\n\t    if (false) {\n\t      boundMethod.__reactBoundContext = component;\n\t      boundMethod.__reactBoundMethod = method;\n\t      boundMethod.__reactBoundArguments = null;\n\t      var componentName = component.constructor.displayName;\n\t      var _bind = boundMethod.bind;\n\t      boundMethod.bind = function(newThis) {\n\t        for (\n\t          var _len = arguments.length,\n\t            args = Array(_len > 1 ? _len - 1 : 0),\n\t            _key = 1;\n\t          _key < _len;\n\t          _key++\n\t        ) {\n\t          args[_key - 1] = arguments[_key];\n\t        }\n\t\n\t        // User is trying to bind() an autobound method; we effectively will\n\t        // ignore the value of \"this\" that the user is trying to use, so\n\t        // let's warn.\n\t        if (newThis !== component && newThis !== null) {\n\t          if (process.env.NODE_ENV !== 'production') {\n\t            warning(\n\t              false,\n\t              'bind(): React component methods may only be bound to the ' +\n\t                'component instance. See %s',\n\t              componentName\n\t            );\n\t          }\n\t        } else if (!args.length) {\n\t          if (process.env.NODE_ENV !== 'production') {\n\t            warning(\n\t              false,\n\t              'bind(): You are binding a component method to the component. ' +\n\t                'React does this for you automatically in a high-performance ' +\n\t                'way, so you can safely remove this call. See %s',\n\t              componentName\n\t            );\n\t          }\n\t          return boundMethod;\n\t        }\n\t        var reboundMethod = _bind.apply(boundMethod, arguments);\n\t        reboundMethod.__reactBoundContext = component;\n\t        reboundMethod.__reactBoundMethod = method;\n\t        reboundMethod.__reactBoundArguments = args;\n\t        return reboundMethod;\n\t      };\n\t    }\n\t    return boundMethod;\n\t  }\n\t\n\t  /**\n\t   * Binds all auto-bound methods in a component.\n\t   *\n\t   * @param {object} component Component whose method is going to be bound.\n\t   */\n\t  function bindAutoBindMethods(component) {\n\t    var pairs = component.__reactAutoBindPairs;\n\t    for (var i = 0; i < pairs.length; i += 2) {\n\t      var autoBindKey = pairs[i];\n\t      var method = pairs[i + 1];\n\t      component[autoBindKey] = bindAutoBindMethod(component, method);\n\t    }\n\t  }\n\t\n\t  var IsMountedPreMixin = {\n\t    componentDidMount: function() {\n\t      this.__isMounted = true;\n\t    }\n\t  };\n\t\n\t  var IsMountedPostMixin = {\n\t    componentWillUnmount: function() {\n\t      this.__isMounted = false;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Add more to the ReactClass base class. These are all legacy features and\n\t   * therefore not already part of the modern ReactComponent.\n\t   */\n\t  var ReactClassMixin = {\n\t    /**\n\t     * TODO: This will be deprecated because state should always keep a consistent\n\t     * type signature and the only use case for this, is to avoid that.\n\t     */\n\t    replaceState: function(newState, callback) {\n\t      this.updater.enqueueReplaceState(this, newState, callback);\n\t    },\n\t\n\t    /**\n\t     * Checks whether or not this composite component is mounted.\n\t     * @return {boolean} True if mounted, false otherwise.\n\t     * @protected\n\t     * @final\n\t     */\n\t    isMounted: function() {\n\t      if (false) {\n\t        warning(\n\t          this.__didWarnIsMounted,\n\t          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n\t            'subscriptions and pending requests in componentWillUnmount to ' +\n\t            'prevent memory leaks.',\n\t          (this.constructor && this.constructor.displayName) ||\n\t            this.name ||\n\t            'Component'\n\t        );\n\t        this.__didWarnIsMounted = true;\n\t      }\n\t      return !!this.__isMounted;\n\t    }\n\t  };\n\t\n\t  var ReactClassComponent = function() {};\n\t  _assign(\n\t    ReactClassComponent.prototype,\n\t    ReactComponent.prototype,\n\t    ReactClassMixin\n\t  );\n\t\n\t  /**\n\t   * Creates a composite component class given a class specification.\n\t   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n\t   *\n\t   * @param {object} spec Class specification (which must define `render`).\n\t   * @return {function} Component constructor function.\n\t   * @public\n\t   */\n\t  function createClass(spec) {\n\t    // To keep our warnings more understandable, we'll use a little hack here to\n\t    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n\t    // unnecessarily identify a class without displayName as 'Constructor'.\n\t    var Constructor = identity(function(props, context, updater) {\n\t      // This constructor gets overridden by mocks. The argument is used\n\t      // by mocks to assert on what gets mounted.\n\t\n\t      if (false) {\n\t        warning(\n\t          this instanceof Constructor,\n\t          'Something is calling a React component directly. Use a factory or ' +\n\t            'JSX instead. See: https://fb.me/react-legacyfactory'\n\t        );\n\t      }\n\t\n\t      // Wire up auto-binding\n\t      if (this.__reactAutoBindPairs.length) {\n\t        bindAutoBindMethods(this);\n\t      }\n\t\n\t      this.props = props;\n\t      this.context = context;\n\t      this.refs = emptyObject;\n\t      this.updater = updater || ReactNoopUpdateQueue;\n\t\n\t      this.state = null;\n\t\n\t      // ReactClasses doesn't have constructors. Instead, they use the\n\t      // getInitialState and componentWillMount methods for initialization.\n\t\n\t      var initialState = this.getInitialState ? this.getInitialState() : null;\n\t      if (false) {\n\t        // We allow auto-mocks to proceed as if they're returning null.\n\t        if (\n\t          initialState === undefined &&\n\t          this.getInitialState._isMockFunction\n\t        ) {\n\t          // This is probably bad practice. Consider warning here and\n\t          // deprecating this convenience.\n\t          initialState = null;\n\t        }\n\t      }\n\t      _invariant(\n\t        typeof initialState === 'object' && !Array.isArray(initialState),\n\t        '%s.getInitialState(): must return an object or null',\n\t        Constructor.displayName || 'ReactCompositeComponent'\n\t      );\n\t\n\t      this.state = initialState;\n\t    });\n\t    Constructor.prototype = new ReactClassComponent();\n\t    Constructor.prototype.constructor = Constructor;\n\t    Constructor.prototype.__reactAutoBindPairs = [];\n\t\n\t    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\t\n\t    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n\t    mixSpecIntoComponent(Constructor, spec);\n\t    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\t\n\t    // Initialize the defaultProps property after all mixins have been merged.\n\t    if (Constructor.getDefaultProps) {\n\t      Constructor.defaultProps = Constructor.getDefaultProps();\n\t    }\n\t\n\t    if (false) {\n\t      // This is a tag to indicate that the use of these method names is ok,\n\t      // since it's used with createClass. If it's not, then it's likely a\n\t      // mistake so we'll warn you to use the static property, property\n\t      // initializer or constructor respectively.\n\t      if (Constructor.getDefaultProps) {\n\t        Constructor.getDefaultProps.isReactClassApproved = {};\n\t      }\n\t      if (Constructor.prototype.getInitialState) {\n\t        Constructor.prototype.getInitialState.isReactClassApproved = {};\n\t      }\n\t    }\n\t\n\t    _invariant(\n\t      Constructor.prototype.render,\n\t      'createClass(...): Class specification must implement a `render` method.'\n\t    );\n\t\n\t    if (false) {\n\t      warning(\n\t        !Constructor.prototype.componentShouldUpdate,\n\t        '%s has a method called ' +\n\t          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n\t          'The name is phrased as a question because the function is ' +\n\t          'expected to return a value.',\n\t        spec.displayName || 'A component'\n\t      );\n\t      warning(\n\t        !Constructor.prototype.componentWillRecieveProps,\n\t        '%s has a method called ' +\n\t          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n\t        spec.displayName || 'A component'\n\t      );\n\t    }\n\t\n\t    // Reduce time spent doing lookups by setting these on the prototype.\n\t    for (var methodName in ReactClassInterface) {\n\t      if (!Constructor.prototype[methodName]) {\n\t        Constructor.prototype[methodName] = null;\n\t      }\n\t    }\n\t\n\t    return Constructor;\n\t  }\n\t\n\t  return createClass;\n\t}\n\t\n\tmodule.exports = factory;\n\n\n/***/ },\n\n/***/ 333:\n4,\n\n/***/ 334:\n5,\n\n/***/ 335:\n6\n\n});\n\n\n/** WEBPACK FOOTER **\n ** tictactoe.js\n **/","/**\n * The examples provided by Facebook are for non-commercial testing and\n * evaluation purposes only.\n *\n * Facebook reserves all rights not expressly granted.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\n * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @providesModule TicTacToeApp\n * @flow\n */\n'use strict';\n\nvar React = require('react-native');\nvar createClass = require('create-react-class');\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  View,\n  Platform\n} = React;\n\nclass Board {\n  grid: Array<Array<number>>;\n  turn: number;\n\n  constructor() {\n    var size = 3;\n    var grid = Array(size);\n    for (var i = 0; i < size; i++) {\n      var row = Array(size);\n      for (var j = 0; j < size; j++) {\n        row[j] = 0;\n      }\n      grid[i] = row;\n    }\n    this.grid = grid;\n\n    this.turn = 1;\n  }\n\n  mark(row: number, col: number, player: number): Board {\n    this.grid[row][col] = player;\n    return this;\n  }\n\n  hasMark(row: number, col: number): boolean {\n    return this.grid[row][col] !== 0;\n  }\n\n  winner(): ?number {\n    for (var i = 0; i < 3; i++) {\n      if (this.grid[i][0] !== 0 && this.grid[i][0] === this.grid[i][1] &&\n          this.grid[i][0] === this.grid[i][2]) {\n        return this.grid[i][0];\n      }\n    }\n\n    for (var i = 0; i < 3; i++) {\n      if (this.grid[0][i] !== 0 && this.grid[0][i] === this.grid[1][i] &&\n          this.grid[0][i] === this.grid[2][i]) {\n        return this.grid[0][i];\n      }\n    }\n\n    if (this.grid[0][0] !== 0 && this.grid[0][0] === this.grid[1][1] &&\n        this.grid[0][0] === this.grid[2][2]) {\n      return this.grid[0][0];\n    }\n\n    if (this.grid[0][2] !== 0 && this.grid[0][2] === this.grid[1][1] &&\n        this.grid[0][2] === this.grid[2][0]) {\n      return this.grid[0][2];\n    }\n\n    return null;\n  }\n\n  tie(): boolean {\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        if (this.grid[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    return this.winner() === null;\n  }\n}\n\nvar Cell = createClass({\n  cellStyle() {\n    switch (this.props.player) {\n      case 1:\n        return styles.cellX;\n      case 2:\n        return styles.cellO;\n      default:\n        return null;\n    }\n  },\n\n  textStyle() {\n    switch (this.props.player) {\n      case 1:\n        return styles.cellTextX;\n      case 2:\n        return styles.cellTextO;\n      default:\n        return {};\n    }\n  },\n\n  textContents() {\n    switch (this.props.player) {\n      case 1:\n        return 'X';\n      case 2:\n        return 'O';\n      default:\n        return '';\n    }\n  },\n\n  render() {\n    return (\n      <TouchableHighlight\n        onPress={this.props.onPress}\n        underlayColor=\"transparent\"\n        activeOpacity={0.5}>\n        <View style={[styles.cell, this.cellStyle()]}>\n          <Text style={[styles.cellText, this.textStyle()]}>\n            {this.textContents()}\n          </Text>\n        </View>\n      </TouchableHighlight>\n    );\n  }\n});\n\nvar GameEndOverlay = createClass({\n  render() {\n    var board = this.props.board;\n\n    var tie = board.tie();\n    var winner = board.winner();\n    if (!winner && !tie) {\n      return <View />;\n    }\n\n    var message;\n    if (tie) {\n      message = 'It\\'s a tie!';\n    } else {\n      message = (winner === 1 ? 'X' : 'O') + ' wins!';\n    }\n\n    return (\n      <View style={styles.overlay}>\n        <Text style={styles.overlayMessage}>{message}</Text>\n        <TouchableHighlight\n          onPress={this.props.onRestart}\n          underlayColor=\"transparent\"\n          activeOpacity={0.5}>\n          <View style={styles.newGame}>\n            <Text style={styles.newGameText}>New Game</Text>\n          </View>\n        </TouchableHighlight>\n      </View>\n    );\n  }\n});\n\nvar TicTacToeApp = createClass({\n  getInitialState() {\n    return { board: new Board(), player: 1 };\n  },\n\n  restartGame() {\n    this.setState(this.getInitialState());\n  },\n\n  nextPlayer(): number {\n    return this.state.player === 1 ? 2 : 1;\n  },\n\n  handleCellPress(row: number, col: number) {\n    if (this.state.board.hasMark(row, col)) {\n      return;\n    }\n\n    this.setState({\n      board: this.state.board.mark(row, col, this.state.player),\n      player: this.nextPlayer(),\n    });\n  },\n\n  render() {\n    var rows = this.state.board.grid.map((cells, row) =>\n      <View key={'row' + row} style={styles.row}>\n        {cells.map((player, col) =>\n          <Cell\n            key={'cell' + col}\n            player={player}\n            onPress={this.handleCellPress.bind(this, row, col)}\n          />\n        )}\n      </View>\n    );\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.title}>EXTREME T3</Text>\n        <View style={styles.board}>\n          {rows}\n        </View>\n        <GameEndOverlay\n          board={this.state.board}\n          onRestart={this.restartGame}\n        />\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white'\n  },\n  title: {\n    fontFamily: 'Chalkduster',\n    fontSize: 39,\n    marginBottom: 20,\n  },\n  board: {\n    padding: 5,\n    backgroundColor: '#47525d',\n    borderRadius: 10,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n\n  // CELL\n\n  cell: {\n    width: 80,\n    height: 80,\n    borderRadius: 5,\n    backgroundColor: '#7b8994',\n    margin: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  cellX: {\n    backgroundColor: '#72d0eb',\n  },\n  cellO: {\n    backgroundColor: '#7ebd26',\n  },\n\n  // CELL TEXT\n\n  cellText: {\n    borderRadius: 5,\n    fontSize: 50,\n    fontFamily: 'AvenirNext-Bold',\n  },\n  cellTextX: {\n    color: '#19a9e5',\n  },\n  cellTextO: {\n    color: '#b9dc2f',\n  },\n\n  // GAME OVER\n\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(221, 221, 221, 0.5)',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  overlayMessage: {\n    fontSize: 40,\n    marginBottom: 20,\n    marginLeft: 20,\n    marginRight: 20,\n    fontFamily: 'AvenirNext-DemiBold',\n    textAlign: 'center',\n  },\n  newGame: {\n    backgroundColor: '#887766',\n    padding: 20,\n    borderRadius: 5,\n  },\n  newGameText: {\n    color: 'white',\n    fontSize: 20,\n    fontFamily: 'AvenirNext-DemiBold',\n  },\n});\n\nAppRegistry.registerComponent('TicTacToeApp', () => TicTacToeApp);\n\nif(Platform.OS == 'web'){\n  var app = document.createElement('div');\n  document.body.appendChild(app);\n\n  AppRegistry.runApplication('TicTacToeApp', {\n    rootTag: app\n  });\n}\n\nmodule.exports = TicTacToeApp;\n\n\n\n/** WEBPACK FOOTER **\n ** ./Examples/TicTacToe/TicTacToeApp.js\n **/","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar React = require('react');\nvar factory = require('./factory');\n\nif (typeof React === 'undefined') {\n  throw Error(\n    'create-react-class could not find the React object. If you are using script tags, ' +\n      'make sure that React is being loaded before create-react-class.'\n  );\n}\n\n// Hack to grab NoopUpdateQueue from isomorphic React\nvar ReactNoopUpdateQueue = new React.Component().updater;\n\nmodule.exports = factory(\n  React.Component,\n  React.isValidElement,\n  ReactNoopUpdateQueue\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/create-react-class/index.js\n ** module id = 331\n ** module chunks = 1 3 4\n **/","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isInherited = name in Constructor;\n      _invariant(\n        !isInherited,\n        'ReactClass: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be ' +\n          'due to a mixin.',\n        name\n      );\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/create-react-class/factory.js\n ** module id = 332\n ** module chunks = 1 3 4\n **/"],"sourceRoot":""}